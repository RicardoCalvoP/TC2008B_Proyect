// Generated by CoffeeScript 1.6.3
var beget, comparisonConstructorByOperator, constructors, isNotCriterion, isRaw, prototypes, _ref;

_ref = require('./util'), beget = _ref.beget, isRaw = _ref.isRaw;

prototypes = {};

module.exports = constructors = {};

prototypes.base = {
  not: function() {
    return constructors.not(this);
  },
  and: function(other) {
    return constructors.and([this, other]);
  },
  or: function(other) {
    return constructors.or([this, other]);
  }
};

prototypes.raw = beget(prototypes.base, {
  sql: function() {
    return this._sql;
  },
  params: function() {
    return this._params;
  }
});

constructors.raw = function(sql, params) {
  return beget(prototypes.raw, {
    _sql: sql,
    _params: params
  });
};

prototypes.comparison = beget(prototypes.base, {
  sql: function() {
    if (isRaw(this._v)) {
      return "" + this._k + " " + this._op + " " + (this._v.sql());
    } else {
      return "" + this._k + " " + this._op + " ?";
    }
  },
  params: function() {
    if (isRaw(this._v)) {
      if ('function' === typeof this._v.params) {
        return this._v.params();
      } else {
        return [];
      }
    } else {
      return [this._v];
    }
  }
});

comparisonConstructorByOperator = function(op) {
  return function(k, v) {
    return beget(prototypes.comparison, {
      _k: k,
      _v: v,
      _op: op
    });
  };
};

constructors.equal = comparisonConstructorByOperator('=');

constructors.notEqual = comparisonConstructorByOperator('!=');

constructors.lowerThan = comparisonConstructorByOperator('<');

constructors.lowerThanEqual = comparisonConstructorByOperator('<=');

constructors.greaterThan = comparisonConstructorByOperator('>');

constructors.greaterThanEqual = comparisonConstructorByOperator('>=');

prototypes["null"] = beget(prototypes.base, {
  sql: function() {
    return "" + this._k + " IS " + (this._isNull ? '' : 'NOT ') + "NULL";
  },
  params: function() {
    return [];
  }
});

constructors["null"] = function(k, isNull) {
  return beget(prototypes["null"], {
    _k: k,
    _isNull: isNull
  });
};

prototypes.not = beget(prototypes.base, {
  innerCriterion: function() {
    return this._criterion._criterion;
  },
  sql: function() {
    if (isNotCriterion(this._criterion)) {
      return this.innerCriterion().sql();
    } else {
      return "NOT (" + (this._criterion.sql()) + ")";
    }
  },
  params: function() {
    return this._criterion.params();
  }
});

isNotCriterion = function(c) {
  return prototypes.not.isPrototypeOf(c);
};

constructors.not = function(criterion) {
  return beget(prototypes.not, {
    _criterion: criterion
  });
};

prototypes["in"] = beget(prototypes.base, {
  sql: function() {
    var questionMarks;
    questionMarks = [];
    this._vs.forEach(function() {
      return questionMarks.push('?');
    });
    return "" + this._k + " " + this._op + " (" + (questionMarks.join(', ')) + ")";
  },
  params: function() {
    return this._vs;
  }
});

constructors["in"] = function(k, vs) {
  return beget(prototypes["in"], {
    _k: k,
    _vs: vs,
    _op: 'IN'
  });
};

constructors.notIn = function(k, vs) {
  return beget(prototypes["in"], {
    _k: k,
    _vs: vs,
    _op: 'NOT IN'
  });
};

prototypes.combination = beget(prototypes.base, {
  sql: function() {
    return this._criteria.map(function(c) {
      return "(" + (c.sql()) + ")";
    }).join(" " + this._op + " ");
  },
  params: function() {
    var params;
    params = [];
    this._criteria.forEach(function(c) {
      return params = params.concat(c.params());
    });
    return params;
  }
});

constructors.and = function(criteria) {
  return beget(prototypes.combination, {
    _criteria: criteria,
    _op: 'AND'
  });
};

constructors.or = function(criteria) {
  return beget(prototypes.combination, {
    _criteria: criteria,
    _op: 'OR'
  });
};
