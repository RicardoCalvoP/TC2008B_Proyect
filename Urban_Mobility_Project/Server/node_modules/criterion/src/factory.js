// Generated by CoffeeScript 1.6.3
var arrayify, constructors, factory,
  __slice = [].slice;

constructors = require('./constructors');

arrayify = require('./util').arrayify;

module.exports = factory = function() {
  var first, innerValue, key, keyCount, keys, modifier, rest, type, value;
  first = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  type = typeof first;
  if (!('string' === type || 'object' === type)) {
    throw new Error("string or object expected as first argument\nbut " + type + " given");
  }
  if (type === 'string') {
    return constructors.raw(first, rest);
  }
  if (Array.isArray(first)) {
    if (first.length === 0) {
      throw new Error('empty criterion');
    }
    return constructors.and(first.map(factory));
  }
  keyCount = Object.keys(first).length;
  if (0 === keyCount) {
    throw new Error('empty criterion');
  }
  if (keyCount > 1) {
    return constructors.and(arrayify(first).map(factory));
  }
  key = Object.keys(first)[0];
  value = first[key];
  if (value == null) {
    throw new Error("value undefined or null for key " + key);
  }
  if (key === '$or') {
    return constructors.or(arrayify(value).map(factory));
  }
  if (key === '$not') {
    return constructors.not(factory(value));
  }
  if ('object' !== typeof value) {
    return constructors.equal(key, value);
  }
  if (Array.isArray(value)) {
    if (value.length === 0) {
      throw Error('in with empty array');
    }
    return constructors["in"](key, value);
  }
  keys = Object.keys(value);
  modifier = keys[0];
  if (keys.length === 1 && 0 === modifier.indexOf('$')) {
    innerValue = value[modifier];
    if (innerValue == null) {
      throw new Error("value undefined or null for key " + key + " and modifier " + modifier);
    }
    switch (modifier) {
      case '$nin':
        if (innerValue.length === 0) {
          throw Error('$nin with empty array');
        }
        return constructors.notIn(key, innerValue);
      case '$lt':
        return constructors.lowerThan(key, innerValue);
      case '$lte':
        return constructors.lowerThanEqual(key, innerValue);
      case '$gt':
        return constructors.greaterThan(key, innerValue);
      case '$gte':
        return constructors.greaterThanEqual(key, innerValue);
      case '$ne':
        return constructors.notEqual(key, innerValue);
      case '$null':
        return constructors["null"](key, innerValue);
      default:
        throw new Error("unknown modifier: " + modifier);
    }
  } else {
    return constructors.equal(key, value);
  }
};
